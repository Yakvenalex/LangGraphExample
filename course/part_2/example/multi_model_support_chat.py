from dotenv import load_dotenv
from langchain_deepseek import ChatDeepSeek
from langchain_amvera import AmveraLLM
from langchain_gigachat.chat_models import GigaChat
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from langgraph.graph import StateGraph, START, END
from typing import TypedDict, List, Literal
from pydantic import BaseModel, Field
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.prompts import PromptTemplate


load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ—Ö —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
deepseek_model = ChatDeepSeek(
    model="deepseek-chat",
    temperature=0.1  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
)

amvera_model = AmveraLLM(
    model="llama70b",
    temperature=0.7  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
)

gigachat_model = GigaChat(
    model="GigaChat-2-Max",
    temperature=0.3,  # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    verify_ssl_certs=False
)


class TaskClassification(BaseModel):
    task_type: Literal["code", "dialog", "local"] = Field(
        description="–¢–∏–ø –∑–∞–¥–∞—á–∏: code - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, dialog - –æ–±—â–µ–Ω–∏–µ, local - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ–∞–ª–∏–∏"
    )
    confidence: float = Field(
        description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç 0.0 –¥–æ 1.0",
        ge=0.0, le=1.0
    )
    reasoning: str = Field(
        description="–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞",
        max_length=100
    )


class MultiModelState(TypedDict):
    user_question: str           # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    task_type: str              # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    code_analysis: str          # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç DeepSeek
    dialog_response: str        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Amvera
    local_context: str          # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç GigaChat
    final_answer: str           # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    should_continue: bool       # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É


classification_parser = JsonOutputParser(pydantic_object=TaskClassification)
classification_prompt = PromptTemplate(
    template="""–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

CODE - –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–ª–∞–¥–∫—É, –∫–æ–¥, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
DIALOG - –æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏, –æ–±—â–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
LOCAL - –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –†–æ—Å—Å–∏—é, —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã, –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –≥–æ—Å—É—Å–ª—É–≥–∏

–í–æ–ø—Ä–æ—Å: {question}

{format_instructions}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON!""",
    input_variables=["question"],
    partial_variables={
        "format_instructions": classification_parser.get_format_instructions()}
)


def classify_task_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek"""
    question = state["user_question"]

    try:
        print(f"ü§î –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

        classification_chain = classification_prompt | deepseek_model | classification_parser
        result = classification_chain.invoke({"question": question})

        task_type = result["task_type"]
        confidence = result["confidence"]
        reasoning = result["reasoning"]

        print(f"üìã –¢–∏–ø: {task_type} ({confidence:.2f}) - {reasoning}")

        return {"task_type": task_type}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return {"task_type": "dialog"}  # Fallback –∫ –¥–∏–∞–ª–æ–≥—É


def code_analysis_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek"""
    question = state["user_question"]

    try:
        print("üíª DeepSeek –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥...")

        code_messages = [
            SystemMessage(content="""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥, –Ω–∞—Ö–æ–¥–∏ –æ—à–∏–±–∫–∏, 
                         –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π —Ç–µ—Ö–Ω–∏—á–Ω–æ –∏ —Ç–æ—á–Ω–æ."""),
            HumanMessage(content=question)
        ]

        response = deepseek_model.invoke(code_messages)
        analysis = response.content

        print(f"‚úÖ DeepSeek: {analysis[:100]}...")

        return {"code_analysis": analysis}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek: {e}")
        return {"code_analysis": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"}


def dialog_response_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è - —Å–∏–ª–∞ Amvera LLaMA"""
    question = state["user_question"]

    try:
        print("üí¨ Amvera –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥...")

        dialog_messages = [
            SystemMessage(content="""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, 
                         –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º."""),
            HumanMessage(content=question)
        ]

        response = amvera_model.invoke(dialog_messages)
        dialog_answer = response.content

        print(f"‚úÖ Amvera: {dialog_answer[:100]}...")

        return {"dialog_response": dialog_answer}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Amvera: {e}")
        return {"dialog_response": "–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"}


def local_context_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ GigaChat"""
    question = state["user_question"]

    try:
        print("üá∑üá∫ GigaChat –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç...")

        local_messages = [
            SystemMessage(content="""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –†–æ—Å—Å–∏–∏: –∑–∞–∫–æ–Ω—ã, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, 
                         –≥–æ—Å—É—Å–ª—É–≥–∏, –º–µ—Å—Ç–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä–µ–∞–ª–∏—è—Ö."""),
            HumanMessage(content=question)
        ]

        response = gigachat_model.invoke(local_messages)
        local_info = response.content

        print(f"‚úÖ GigaChat: {local_info[:100]}...")

        return {"local_context": local_info}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}")
        return {"local_context": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"}


def user_input_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()

    if question.lower() in ["–≤—ã—Ö–æ–¥", "quit", "exit", "bye"]:
        return {"should_continue": False}

    return {
        "user_question": question,
        "should_continue": True
    }


def synthesize_answer_node(state: MultiModelState) -> dict:
    """–£–∑–µ–ª —Å–∏–Ω—Ç–µ–∑–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Amvera –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
    task_type = state["task_type"]
    question = state["user_question"]

    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []

    if state.get("code_analysis"):
        results.append(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {state['code_analysis']}")

    if state.get("dialog_response"):
        results.append(f"–û–±—â–∏–π –æ—Ç–≤–µ—Ç: {state['dialog_response']}")

    if state.get("local_context"):
        results.append(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {state['local_context']}")

    if not results:
        return {"final_answer": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–µ–π"}

    try:
        print("üîÑ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç...")

        synthesis_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ò–ò-–º–æ–¥–µ–ª–µ–π –¥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–¥–∏–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}
–¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –º–æ–¥–µ–ª–µ–π:
{chr(10).join(results)}

–°–æ–∑–¥–∞–π —Å–≤—è–∑–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –ª—É—á—à–µ–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""

        synthesis_messages = [
            SystemMessage(
                content="–¢—ã —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—à—å –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ò–ò –≤ –µ–¥–∏–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."),
            HumanMessage(content=synthesis_prompt)
        ]

        response = amvera_model.invoke(synthesis_messages)
        final_answer = response.content

        print("="*60)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–í–ï–¢:")
        print("="*60)
        print(final_answer)
        print("="*60)

        return {"final_answer": final_answer}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
        return {"final_answer": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"}


def route_after_input(state: MultiModelState) -> str:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞"""
    if not state.get("should_continue", True):
        return "end"
    return "classify"


def route_after_classification(state: MultiModelState) -> str:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏"""
    task_type = state.get("task_type", "dialog")

    if task_type == "code":
        return "analyze_code"
    elif task_type == "local":
        return "local_context"
    else:
        return "dialog_response"


def route_to_synthesis(state: MultiModelState) -> str:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–∏–Ω—Ç–µ–∑—É –æ—Ç–≤–µ—Ç–∞"""
    return "synthesize"


def route_continue(state: MultiModelState) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
    return "get_input" if state.get("should_continue", True) else "end"


# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
graph = StateGraph(MultiModelState)

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
graph.add_node("get_input", user_input_node)
graph.add_node("classify", classify_task_node)
graph.add_node("analyze_code", code_analysis_node)
graph.add_node("dialog_response", dialog_response_node)
graph.add_node("local_context", local_context_node)
graph.add_node("synthesize", synthesize_answer_node)

# –°–æ–∑–¥–∞–µ–º —Ä—ë–±—Ä–∞
graph.add_edge(START, "get_input")

# –£—Å–ª–æ–≤–Ω—ã–µ —Ä—ë–±—Ä–∞
graph.add_conditional_edges(
    "get_input",
    route_after_input,
    {
        "classify": "classify",
        "end": END
    }
)

graph.add_conditional_edges(
    "classify",
    route_after_classification,
    {
        "analyze_code": "analyze_code",
        "dialog_response": "dialog_response",
        "local_context": "local_context"
    }
)

# –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã –≤–µ–¥—É—Ç –∫ —Å–∏–Ω—Ç–µ–∑—É
graph.add_conditional_edges(
    "analyze_code",
    route_to_synthesis,
    {"synthesize": "synthesize"}
)

graph.add_conditional_edges(
    "dialog_response",
    route_to_synthesis,
    {"synthesize": "synthesize"}
)

graph.add_conditional_edges(
    "local_context",
    route_to_synthesis,
    {"synthesize": "synthesize"}
)

graph.add_conditional_edges(
    "synthesize",
    route_continue,
    {
        "get_input": "get_input",
        "end": END
    }
)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è
multi_model_app = graph.compile()

if __name__ == "__main__":
    print("ü§ñ –ú—É–ª—å—Ç–∏–º–æ–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    print("DeepSeek - –∫–æ–¥ | Amvera - –¥–∏–∞–ª–æ–≥–∏ | GigaChat - –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    print("–ö–æ–º–∞–Ω–¥–∞ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("-" * 70)

    initial_state = {
        "user_question": "",
        "task_type": "",
        "code_analysis": "",
        "dialog_response": "",
        "local_context": "",
        "final_answer": "",
        "should_continue": True
    }

    try:
        final_state = multi_model_app.invoke(initial_state)
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
