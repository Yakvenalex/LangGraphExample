from dotenv import load_dotenv
from langchain_amvera import AmveraLLM
from langchain_core.messages import SystemMessage, HumanMessage, BaseMessage, AIMessage
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.prompts import PromptTemplate
from langgraph.graph import StateGraph, START, END
from typing import TypedDict, List, Literal
from pydantic import BaseModel, Field
import json

load_dotenv()

# –ú–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏


class MessageClassification(BaseModel):
    message_type: Literal["review", "question"] = Field(
        description="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"
    )
    confidence: float = Field(
        description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç 0.0 –¥–æ 1.0",
        ge=0.0, le=1.0
    )

# –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞


class ReviewAnalysis(BaseModel):
    sentiment: Literal["positive", "negative", "neutral"] = Field(
        description="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–∞"
    )
    confidence: float = Field(
        description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç 0.0 –¥–æ 1.0",
        ge=0.0, le=1.0
    )
    key_topics: List[str] = Field(
        description="–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏–∑ –æ—Ç–∑—ã–≤–∞",
        max_items=5
    )
    summary: str = Field(
        description="–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏",
        max_length=150
    )

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã


class SystemState(TypedDict):
    messages: List[BaseMessage]
    current_user_input: str
    message_type: str
    should_continue: bool
    analysis_results: List[dict]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
llm = AmveraLLM(model="llama70b", temperature=0.0)

# –ü–∞—Ä—Å–µ—Ä—ã
classification_parser = JsonOutputParser(pydantic_object=MessageClassification)
review_parser = JsonOutputParser(pydantic_object=ReviewAnalysis)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
classification_prompt = PromptTemplate(
    template="""–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º –æ —Ç–æ–≤–∞—Ä–µ/—É—Å–ª—É–≥–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º/—Å–æ–æ–±—â–µ–Ω–∏–µ–º.

–û–¢–ó–´–í - —ç—Ç–æ –º–Ω–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ, —É—Å–ª—É–≥–µ, –æ–ø—ã—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.
–í–û–ü–†–û–° - —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏, –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.

–°–æ–æ–±—â–µ–Ω–∏–µ: {user_input}

{format_instructions}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON!""",
    input_variables=["user_input"],
    partial_variables={
        "format_instructions": classification_parser.get_format_instructions()}
)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞
review_analysis_prompt = PromptTemplate(
    template="""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞:

–û—Ç–∑—ã–≤: {review}

{format_instructions}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!""",
    input_variables=["review"],
    partial_variables={
        "format_instructions": review_parser.get_format_instructions()}
)


def user_input_node(state: SystemState) -> dict:
    """–£–∑–µ–ª –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_input = input("\nüë§ –í—ã: ").strip()

    if user_input.lower() in ["–≤—ã—Ö–æ–¥", "quit", "exit", "–ø–æ–∫–∞", "bye"]:
        return {"should_continue": False}

    if user_input.lower() in ["—Å—Ç–∞—Ç", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "results"]:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
        analysis_results = state.get("analysis_results", [])
        if analysis_results:
            print(f"\nüìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(analysis_results)}")
            sentiments = [r["analysis"]["sentiment"] for r in analysis_results]
            pos = sentiments.count("positive")
            neg = sentiments.count("negative")
            neu = sentiments.count("neutral")
            print(
                f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: {pos}, –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: {neg}, –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {neu}")
        else:
            print("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        return {"should_continue": True}

    return {
        "current_user_input": user_input,
        "should_continue": True
    }


def classify_message_node(state: SystemState) -> dict:
    """–£–∑–µ–ª –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_input = state["current_user_input"]

    try:
        print("ü§î –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classification_chain = classification_prompt | llm | classification_parser
        result = classification_chain.invoke({"user_input": user_input})

        message_type = result["message_type"]
        confidence = result["confidence"]

        print(f"üìù –¢–∏–ø: {message_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")

        return {"message_type": message_type}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å–æ–º
        return {"message_type": "question"}


def analyze_review_node(state: SystemState) -> dict:
    """–£–∑–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞"""
    user_input = state["current_user_input"]

    try:
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤...")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
        analysis_chain = review_analysis_prompt | llm | review_parser
        analysis_result = analysis_chain.invoke({"review": user_input})

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        full_result = {
            "original_review": user_input,
            "analysis": analysis_result
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis_results = state.get("analysis_results", [])
        new_analysis_results = analysis_results + [full_result]

        # –í—ã–≤–æ–¥–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–ê (JSON):")
        print("="*60)
        print(json.dumps(full_result, ensure_ascii=False, indent=2))
        print("="*60)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = state["messages"]
        new_messages = messages + [
            HumanMessage(content=user_input),
            AIMessage(
                content=f"–û—Ç–∑—ã–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {analysis_result['sentiment']} —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {analysis_result['confidence']:.2f}")
        ]

        return {
            "messages": new_messages,
            "analysis_results": new_analysis_results
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        messages = state["messages"]
        new_messages = messages + [
            HumanMessage(content=user_input),
            AIMessage(content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–∑—ã–≤–∞.")
        ]

        return {"messages": new_messages}


def answer_question_node(state: SystemState) -> dict:
    """–£–∑–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user_input = state["current_user_input"]

    try:
        print("üí¨ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å...")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        messages = state["messages"] + [HumanMessage(content=user_input)]

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        response = llm.invoke(messages)
        ai_response = response.content

        print(f"ü§ñ –ò–ò: {ai_response}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        new_messages = messages + [AIMessage(content=ai_response)]

        return {"messages": new_messages}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")

        messages = state["messages"] + [
            HumanMessage(content=user_input),
            AIMessage(
                content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        ]

        return {"messages": messages}

# –§—É–Ω–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏


def route_after_input(state: SystemState) -> str:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not state.get("should_continue", True):
        return "end"

    if state.get("current_user_input"):
        return "classify"

    return "get_input"


def route_after_classification(state: SystemState) -> str:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    message_type = state.get("message_type", "question")

    if message_type == "review":
        return "analyze_review"
    else:
        return "answer_question"


def route_continue(state: SystemState) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    return "get_input" if state.get("should_continue", True) else "end"


# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
graph = StateGraph(SystemState)

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
graph.add_node("get_input", user_input_node)
graph.add_node("classify", classify_message_node)
graph.add_node("analyze_review", analyze_review_node)
graph.add_node("answer_question", answer_question_node)

# –°–æ–∑–¥–∞–µ–º —Ä—ë–±—Ä–∞
graph.add_edge(START, "get_input")

# –£—Å–ª–æ–≤–Ω—ã–µ —Ä—ë–±—Ä–∞
graph.add_conditional_edges(
    "get_input",
    route_after_input,
    {
        "classify": "classify",
        "get_input": "get_input",
        "end": END
    }
)

graph.add_conditional_edges(
    "classify",
    route_after_classification,
    {
        "analyze_review": "analyze_review",
        "answer_question": "answer_question"
    }
)

graph.add_conditional_edges(
    "analyze_review",
    route_continue,
    {
        "get_input": "get_input",
        "end": END
    }
)

graph.add_conditional_edges(
    "answer_question",
    route_continue,
    {
        "get_input": "get_input",
        "end": END
    }
)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≥—Ä–∞—Ñ–∞
app = graph.compile()

if __name__ == "__main__":
    print("ü§ñ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ + –ß–∞—Ç-–±–æ—Ç")
    print("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ - –ø–æ–ª—É—á–∏—Ç–µ JSON –∞–Ω–∞–ª–∏–∑")
    print("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç")
    print("–ö–æ–º–∞–Ω–¥—ã: '—Å—Ç–∞—Ç' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å")
    print("-" * 60)

    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_state = {
        "messages": [
            SystemMessage(
                content="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        ],
        "current_user_input": "",
        "message_type": "",
        "should_continue": True,
        "analysis_results": []
    }

    try:
        final_state = app.invoke(initial_state)
        print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(final_state.get('messages', []))}")
        print(
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(final_state.get('analysis_results', []))}")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
