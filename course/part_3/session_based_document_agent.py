import asyncio
import sys
from dotenv import load_dotenv

from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_deepseek import ChatDeepSeek
from langchain_core.tools import tool
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from langchain_mcp_adapters.client import MultiServerMCPClient

load_dotenv()


@tool
async def session_status() -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    return "–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ filesystem –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."


@tool
async def end_session(reason: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É") -> str:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."""
    print(f"\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {reason}")
    return f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {reason}"


async def get_all_tools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: MCP + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π."""
    custom_tools = [session_status, end_session]

    try:
        mcp_client = MultiServerMCPClient({
            "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."],
                "transport": "stdio",
            }
        })
        mcp_tools = await mcp_client.get_tools()
        print(f"üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(mcp_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ filesystem")
        return custom_tools + mcp_tools
    except Exception as e:
        print(f"‚ö†Ô∏è  MCP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {e}")
        return custom_tools


async def create_agent():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏."""
    tools = await get_all_tools()

    model = ChatDeepSeek(
        model="deepseek-chat",
        temperature=0.3,
    )

    system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–∏—Å–µ–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- read_file, write_file - —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
- list_directory - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫  
- create_directory - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
- move_file, copy_file - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
1. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
2. –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª—ã
3. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ - –ø–æ–º–Ω–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

–ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò:
–ò—Å–ø–æ–ª—å–∑—É–π end_session() –∫–æ–≥–¥–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å ("–∑–∞–∫–æ–Ω—á–∏—Ç—å", "–≤—ã–π—Ç–∏", "—Ö–≤–∞—Ç–∏—Ç")
- –†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
- –ü–æ—Å–ª–µ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "—Å–ø–∞—Å–∏–±–æ", "–≥–æ—Ç–æ–≤–æ", "–≤—Å—ë —Ö–æ—Ä–æ—à–æ"

–í–ê–ñ–ù–û: –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º!"""

    checkpointer = MemorySaver()
    agent = create_react_agent(
        model=model,
        tools=tools,
        checkpointer=checkpointer,
        prompt=SystemMessage(content=system_prompt)
    )

    print("‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é")
    return agent


async def print_session_stats(agent, config):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏."""
    try:
        state = await agent.aget_state(config)
        if state and state.values.get("messages"):
            message_count = len(state.values["messages"])
            print(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            print(f"üÜî ID –ø–æ—Ç–æ–∫–∞: {config['configurable']['thread_id']}")
        else:
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def run_interactive_session():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ü–û–ú–û–©–ù–ò–ö –ü–û –°–û–ó–î–ê–ù–ò–Æ –ü–ò–°–ï–ú")
    print("üí° –ö–æ–º–∞–Ω–¥—ã: '–≤—ã—Ö–æ–¥', 'quit', '—Å—Ç–æ–ø' - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("üìù –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = await create_agent()
    config = {"configurable": {"thread_id": "document-session"}}

    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                user_input = input("\nüë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()

                if not user_input:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit', '—Å—Ç–æ–ø', 'stop']:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                print("\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
                user_message = HumanMessage(content=user_input)
                response_printed = False
                session_ended = False

                async for chunk in agent.astream({"messages": [user_message]}, config=config, stream_mode="messages"):
                    if "messages" in chunk and chunk["messages"]:
                        last_msg = chunk["messages"][-1]

                        if isinstance(last_msg, AIMessage) and not response_printed:
                            print(f"\nü§ñ {last_msg.content}")
                            response_printed = True

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                            if last_msg.tool_calls:
                                for tool_call in last_msg.tool_calls:
                                    if tool_call["name"] == "end_session":
                                        session_ended = True

                if session_ended:
                    print("üîö –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é")
                    break

            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                continue

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
        await print_session_stats(agent, config)
        print("üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        await run_interactive_session()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
