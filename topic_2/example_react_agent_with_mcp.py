import asyncio
from dotenv import load_dotenv
from langchain_deepseek import ChatDeepSeek
from langchain_core.tools import tool
from faker import Faker
from langchain_mcp_adapters.client import MultiServerMCPClient
from langgraph.prebuilt import create_react_agent


load_dotenv()

@tool
async def get_random_user_name(gender: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –º—É–∂—Å–∫–æ–µ –∏–ª–∏ –∂–µ–Ω—Å–∫–æ–µ –∏–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è:
    male - –º—É–∂—á–∏–Ω–∞, female - –∂–µ–Ω—â–∏–Ω–∞
    """
    faker = Faker("ru_RU")
    gender = gender.lower()
    if gender == "male":
        return f"{faker.first_name_male()} {faker.last_name_male()}"
    return f"{faker.first_name_female()} {faker.last_name_female()}"


async def get_all_tools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: –≤–∞—à–∏—Ö + MCP"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP –∫–ª–∏–µ–Ω—Ç–∞
    mcp_client = MultiServerMCPClient(
        {
            "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."],
                "transport": "stdio",
            },
            "match_mcp": {
                "transport": "streamable_http",
                "url": "https://mcpserver-yakvenalex.amvera.io/mcp/",
            },
            # "context7": {
            #     "transport": "streamable_http",
            #     "url": "https://mcp.context7.com/mcp",
            # },
        }
    )

    # –ü–æ–ª—É—á–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    mcp_tools = await mcp_client.get_tools()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    return  [get_random_user_name] + mcp_tools


async def run_query(agent, query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É —Å —á–∏—Ç–∞–µ–º—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"üéØ –ó–∞–ø—Ä–æ—Å: {query}")

    step_counter = 0
    processed_messages = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    async for event in agent.astream(
        {"messages": [{"role": "user", "content": query}]},
        stream_mode="values",
    ):
        if "messages" in event and event["messages"]:
            messages = event["messages"]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages:
                msg_id = getattr(msg, 'id', str(id(msg)))
                if msg_id in processed_messages:
                    continue
                processed_messages.add(msg_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_type = getattr(msg, 'type', 'unknown')
                content = getattr(msg, 'content', '')
                
                # 1. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if msg_type == 'human':
                    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {content}")
                    print("-" * 40)
                
                # 2. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò
                elif msg_type == 'ai':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    tool_calls = getattr(msg, 'tool_calls', [])
                    
                    if tool_calls:
                        step_counter += 1
                        print(f"ü§ñ –®–∞–≥ {step_counter}: –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                        
                        # –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if content and content.strip():
                            print(f"üí≠ –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {content}")
                        
                        # –î–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        for i, tool_call in enumerate(tool_calls, 1):
                            # –ü–∞—Ä—Å–∏–º tool_call –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                            if isinstance(tool_call, dict):
                                tool_name = tool_call.get('name', 'unknown')
                                tool_args = tool_call.get('args', {})
                                tool_id = tool_call.get('id', 'unknown')
                            else:
                                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                                tool_name = getattr(tool_call, 'name', 'unknown')
                                tool_args = getattr(tool_call, 'args', {})
                                tool_id = getattr(tool_call, 'id', 'unknown')
                            
                            print(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i}: {tool_name}")
                            print(f"   üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {tool_args}")
                            print(f"   üÜî ID: {tool_id}")
                        
                        print("-" * 40)
                    
                    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ tool_calls)
                    elif content and content.strip():
                        print(f"üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                        print(f"üí¨ {content}")
                        print("-" * 40)
                
                # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                elif msg_type == 'tool':
                    tool_name = getattr(msg, 'name', 'unknown')
                    tool_call_id = getattr(msg, 'tool_call_id', 'unknown')
                    
                    print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
                    print(f"   üÜî Call ID: {tool_call_id}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if content:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                        try:
                            import json
                            if content.strip().startswith(('{', '[')):
                                parsed = json.loads(content)
                                formatted = json.dumps(parsed, indent=2, ensure_ascii=False)
                                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                                for line in formatted.split('\n'):
                                    print(f"      {line}")
                            else:
                                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {content}")
                        except:
                            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {content}")
                    
                    print("-" * 40)
                
                # 4. –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                else:
                    if content:
                        print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ({msg_type}): {content[:100]}...")
                        print("-" * 40)
    
    print("=" * 80)
    print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    print()


async def main():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ MCP –∫–ª–∏–µ–Ω—Ç
    all_tools = await get_all_tools()
    agent = create_react_agent(model=ChatDeepSeek(model="deepseek-chat"),
                               tools=all_tools,
                               prompt="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, \
                                   –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏.",
                               )
    await run_query(agent, query="–°–≤–æ–π—Å—Ç–≤–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–¥–∏—É—Å–æ–º 29 –∏ –ø—Ä–∏–¥—É–º–∞–π —Å–∂–µ–Ω—Å–∫–æ–µ –∏–º—è?")
    

asyncio.run(main())