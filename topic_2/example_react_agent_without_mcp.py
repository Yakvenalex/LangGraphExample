import asyncio
import random
from typing import TypedDict
from dotenv import load_dotenv
from faker import Faker
from langchain_deepseek import ChatDeepSeek
from langgraph.prebuilt import create_react_agent

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()
fake = Faker("ru_RU")


# --- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ---
class FakeUser(TypedDict):
    name: str
    age: int
    job: str
    email: str
    interests: list[str]


# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ---
async def generate_fake_user() -> FakeUser:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ API)
    await asyncio.sleep(0.01)

    return {
        "name": fake.name(),
        "age": random.randint(18, 60),
        "job": fake.job(),
        "email": fake.email(),
        "interests": random.sample(
            [
                "—á—Ç–µ–Ω–∏–µ",
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                "—Å–ø–æ—Ä—Ç",
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "–∫—É–ª–∏–Ω–∞—Ä–∏—è",
                "–º—É–∑—ã–∫–∞",
                "–π–æ–≥–∞",
                "–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
                "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ",
                "—Ç–∞–Ω—Ü—ã",
                "–≤–µ–ª–æ—Å–∏–ø–µ–¥",
                "–∫–∏–Ω–æ",
                "—Ç–µ–∞—Ç—Ä",
            ],
            k=3,
        ),
    }


async def get_random_fact() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"""
    await asyncio.sleep(0.15)

    facts = [
        "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—é—é –∫—Ä–æ–≤—å",
        "–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è - –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç",
        "–ë–∞–Ω–∞–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —è–≤–ª—è—é—Ç—Å—è —è–≥–æ–¥–∞–º–∏, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç",
        "–ê–∫—É–ª—ã —Å—Ç–∞—Ä—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ - –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —É–∂–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç",
        "–í –∫–æ—Å–º–æ—Å–µ –º–µ—Ç–∞–ª–ª—ã –º–æ–≥—É—Ç —Å–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –±–µ–∑ –Ω–∞–≥—Ä–µ–≤–∞",
    ]
    return random.choice(facts)


# –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
tools = [generate_fake_user, get_random_fact]


# –°–æ–∑–¥–∞–µ–º ReAct –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é create_react_agent
agent = create_react_agent(
    model=ChatDeepSeek(model="deepseek-chat"),
    tools=tools,
    prompt="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º!",
)


# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def run_query(query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print(f"üéØ –ó–∞–ø—Ä–æ—Å: {query}")
    print("-" * 60)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º astream –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async for event in agent.astream(
        {"messages": [{"role": "user", "content": query}]},
        stream_mode="values",  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ):
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        if "messages" in event and event["messages"]:
            last_message = event["messages"][-1]
            if hasattr(last_message, "content") and last_message.content:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if hasattr(last_message, "type") and last_message.type == "ai":
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {last_message.content}")
                    print()


async def run_conversation(
    query="–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π –º–Ω–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ",
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ LangGraph –∞–≥–µ–Ω—Ç–∞...\n")
    await run_query(query)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await run_conversation()
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ LangGraph –∞–≥–µ–Ω—Ç–∞ (2025)...")
    asyncio.run(main())
