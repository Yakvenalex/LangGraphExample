# –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ mcp —Å–µ—Ä–≤–µ—Ä–∞
import asyncio
import json
from fastmcp import Client
from dotenv import load_dotenv
import os

load_dotenv()


async def test_math_server():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞."""

    print("üßÆ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–µ—Ä–≤–µ—Ä—É...")
    client = Client(os.getenv("BASE_MCP_URL"))

    async with client:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await client.ping()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            tools = await client.list_tools()
            resources = await client.list_resources()
            prompts = await client.list_prompts()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
            for tool in tools:
                print(f"  ‚Ä¢ {tool.name}")

            print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
            for resource in resources:
                print(f"  ‚Ä¢ {resource.uri}")

            print(f"\nüí≠ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts)}")
            for prompt in prompts:
                print(f"  ‚Ä¢ {prompt.name}")

            print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
            print("-" * 40)

            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            def extract_data(result):
                """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
                if isinstance(result.content, list) and len(result.content) > 0:
                    text_content = result.content[0]
                    if hasattr(text_content, 'text'):
                        return json.loads(text_content.text)
                return result.content

            # 1. –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            print("1Ô∏è‚É£ –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ:")
            result = await client.call_tool("calculate_basic", {"expression": "2 + 3 * 4"})
            data = extract_data(result)
            print(f"   2 + 3 * 4 = {data['result']}")

            # 2. –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
            print("\n2Ô∏è‚É£ –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0:")
            result = await client.call_tool("solve_quadratic", {"a": 1, "b": -5, "c": 6})
            data = extract_data(result)
            print(f"   –ö–æ—Ä–Ω–∏: {data['roots']}")

            # 3. –§–∞–∫—Ç–æ—Ä–∏–∞–ª
            print("\n3Ô∏è‚É£ –§–∞–∫—Ç–æ—Ä–∏–∞–ª 5:")
            result = await client.call_tool("factorial", {"n": 5})
            data = extract_data(result)
            print(f"   5! = {data['factorial']}")

            # 4. –ì–µ–æ–º–µ—Ç—Ä–∏—è - –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            print("\n4Ô∏è‚É£ –°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–¥–∏—É—Å–æ–º 3:")
            result = await client.call_tool("circle_properties", {"radius": 3})
            data = extract_data(result)
            print(f"   –ü–ª–æ—â–∞–¥—å: {data['area']:.2f}")
            print(f"   –î–ª–∏–Ω–∞: {data['circumference']:.2f}")

            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö [1, 2, 3, 4, 5]:")
            result = await client.call_tool("analyze_dataset", {"numbers": [1, 2, 3, 4, 5]})
            data = extract_data(result)
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {data['mean']}")
            print(f"   –ú–µ–¥–∏–∞–Ω–∞: {data['median']}")

            # 6. –ß–∏—Ç–∞–µ–º —Ä–µ—Å—É—Ä—Å - —Ñ–æ—Ä–º—É–ª—ã
            print("\n6Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:")
            resource = await client.read_resource("math://formulas/basic")
            print(f"   DEBUG: resource = {resource}")
            print(f"   DEBUG: type = {type(resource)}")
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É
            if hasattr(resource, 'content'):
                print(f"   –ü–æ–ª—É—á–∏–ª–∏ {len(resource.content)} —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º—É–ª")
            elif isinstance(resource, list) and len(resource) > 0:
                content = resource[0]
                if hasattr(content, 'text'):
                    print(f"   –ü–æ–ª—É—á–∏–ª–∏ {len(content.text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º—É–ª")
                else:
                    print(f"   –†–µ—Å—É—Ä—Å: {content}")
            else:
                print(f"   –†–µ—Å—É—Ä—Å: {resource}")

            # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            print("\n7Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:")
            prompt = await client.get_prompt("explain_solution", {
                "problem": "x¬≤ - 4 = 0",
                "solution": "x = ¬±2",
                "level": "beginner"
            })
            print(f"   DEBUG: prompt = {type(prompt)}")
            if hasattr(prompt, 'content'):
                print(
                    f"   –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(prompt.content)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"   –ü—Ä–æ–º–ø—Ç: {prompt}")

            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_math_server())
