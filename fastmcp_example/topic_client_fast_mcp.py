import asyncio
import json
from fastmcp import Client
from dotenv import load_dotenv

load_dotenv()


def safe_parse_json(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        return text


async def test_demo_server():
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Demo Assistant MCP-—Å–µ—Ä–≤–µ—Ä–∞."""

    print("ü§ñ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Demo Assistant —Å–µ—Ä–≤–µ—Ä—É...")
    client = Client("http://127.0.0.1:8099/mcp/")

    async with client:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n")

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
            tools = await client.list_tools()
            resources = await client.list_resources()
            prompts = await client.list_prompts()

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            print(f"üîß –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
            for tool in tools:
                print(f"   ‚Ä¢ {tool.name}: {tool.description}")

            print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
            for resource in resources:
                print(f"   ‚Ä¢ {resource.uri}")

            print(f"\nüí≠ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts)}")
            for prompt in prompts:
                print(f"   ‚Ä¢ {prompt.name}: {prompt.description}")

            print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–û–ù–ê–õ:")
            print("-" * 50)

            # === –¢–ï–°–¢–ò–†–£–ï–ú –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===

            # 1. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º calculate_age:")
            result = await client.call_tool("calculate_age", {"birth_year": 1990})
            age_data = safe_parse_json(result.content[0].text)
            print(f"   –í–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ 1990 –≥.—Ä.: {age_data} –ª–µ—Ç")

            # 2. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
            print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_password:")
            result = await client.call_tool("generate_password", {"length": 16})
            password_data = safe_parse_json(result.content[0].text)
            print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤): {password_data}")

            # === –¢–ï–°–¢–ò–†–£–ï–ú –†–ï–°–£–†–°–´ ===

            # 3. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            print("\n3Ô∏è‚É£ –ß–∏—Ç–∞–µ–º system://status:")
            resource = await client.read_resource("system://status")
            status_content = resource[0].text
            status_data = safe_parse_json(status_content)
            print(f"   –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status_data['status']}")
            print(f"   –í—Ä–µ–º—è: {status_data['timestamp']}")
            print(f"   –í–µ—Ä—Å–∏—è: {status_data['version']}")

            # 4. –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ–º–æ—â–∏
            print("\n4Ô∏è‚É£ –ß–∏—Ç–∞–µ–º help://password:")
            resource = await client.read_resource("help://password")
            help_content = resource[0].text
            print(f"   –°–ø—Ä–∞–≤–∫–∞: {help_content}")

            # === –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–û–ú–ü–¢–´ ===

            # 5. –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            print("\n5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º security_check –ø—Ä–æ–º–ø—Ç:")
            prompt = await client.get_prompt("security_check", {
                "action": "–æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç 3000 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            })
            security_prompt = prompt.messages[0].content.text
            print(f"   –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (–¥–ª–∏–Ω–∞: {len(security_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"   –ù–∞—á–∞–ª–æ: {security_prompt[:100]}...")

            # 6. –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            print("\n6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º explain_result –ø—Ä–æ–º–ø—Ç:")
            prompt = await client.get_prompt("explain_result", {
                "tool_name": "generate_password",
                "result": "Tj9$mK2pL8qX"
            })
            explain_prompt = prompt.messages[0].content.text
            print(f"   –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (–¥–ª–∏–Ω–∞: {len(explain_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"   –ù–∞—á–∞–ª–æ: {explain_prompt[:100]}...")

            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 2/{len(tools)}")
            print(f"   ‚úÖ –†–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 2/{len(resources)}")
            print(f"   ‚úÖ –ü—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 2/{len(prompts)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_demo_server())
